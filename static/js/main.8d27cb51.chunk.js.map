{"version":3,"sources":["components/Options.js","components/Citys.js","components/Grafica2.js","App.js","serviceWorker.js","index.js"],"names":["options","scales","xAxes","display","scaleLabel","labelString","fontColor","fontSize","ticks","yAxes","Citys","props","useForm","register","handleSubmit","className","onSubmit","data","changeLocation","place","name","ref","Grafica2","useState","datos2","setdatos2","xdata","setxdata","setdatap","clima","setclima","city","setcity","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","fetchWeather","a","fetch","res","json","res_json","console","log","main","temp","length","location","type","onClick","interval","setInterval","clearInterval","id","pressure","humidity","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d27cb51.chunk.js","sourcesContent":["export const options= {     \r\n    scales: {\r\n                 xAxes: [{\r\n                     display: true,\r\n                     scaleLabel: {\r\n                         display: true,\r\n                         labelString: 'Samples',\r\n                         fontColor:'#000000',\r\n                         fontSize:20\r\n                     },\r\n                     ticks: {\r\n                        fontColor: \"black\",\r\n                        fontSize: 16\r\n                       }\r\n                 }],\r\n                 yAxes: [{\r\n                     display: true,\r\n                     scaleLabel: {\r\n                         display: true,\r\n                         labelString: 'Temp ºC',\r\n                         fontColor: '#000000',\r\n                         fontSize:20\r\n                     },\r\n                     ticks: {\r\n                           fontColor: \"black\",\r\n                           fontSize: 16\r\n                     }\r\n                 }]\r\n          }\r\n  }\r\n\r\n","import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nexport default function Citys(props) {\r\n    \r\n    const { register, handleSubmit } = useForm();\r\n\r\n    const onSubmit = (data) => {\r\n\r\n        props.changeLocation(data.place)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <form className=\"form-group\" onSubmit={handleSubmit(onSubmit)} > \r\n                <select className=\"form-control mb-2\" name=\"place\" ref={register}>\r\n                    <option>Bogota</option>\r\n                    <option>London</option>\r\n                    <option>Soacha</option>\r\n                    <option>Mexico</option>\r\n                    <option>Bucaramanga</option>\r\n                </select>\r\n                \r\n                <button className=\"btn btn-outline-dark\">Select Location</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { options } from './Options'\r\nimport Citys from './Citys'\r\n\r\n\r\n\r\nexport default function Grafica2() {\r\n\r\n\r\n  const [datos2, setdatos2] = useState([])\r\n  const [xdata, setxdata] = useState([])\r\n  const [datap, setdatap] = useState([]);\r\n  const [clima, setclima] = useState(0);\r\n  const [city, setcity] = useState('')\r\n\r\n  const data = {\r\n    labels: xdata,\r\n    datasets: [\r\n      {\r\n        label: 'DATOS',\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: datos2\r\n      }\r\n    ]\r\n  };\r\n\r\n  const dataTest = () => {\r\n    const interval = setInterval(fetchWeather, 5000)\r\n    setdatap(interval)\r\n  }\r\n\r\n\r\n  const fetchWeather = async () => {\r\n    const res = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=9c522b92a13cba127c9b88450c5f8de4&units=metric`)\r\n    const res_json = await res.json()\r\n    console.log('las variables son',res_json)\r\n    setclima(clima=>res_json.main)\r\n    \r\n    setdatos2(datos2 => [...datos2, res_json.main.temp])\r\n    setxdata(xdata => [...xdata, datos2.length])\r\n  }\r\n\r\n\r\n  const stopTime = () => {\r\n    setdatap(clearInterval)\r\n  }\r\n\r\n  const changeLocation = (location) => {\r\n    setcity(location)\r\n  }\r\n\r\n  return (\r\n    <div className=\"m-5\">\r\n      <h1 className=\"text-center mb-5\">Temperatura <span className=\"text-secondary\">{city}</span></h1>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-8\">\r\n          <Line data={data} options={options} />\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <Citys changeLocation={changeLocation}></Citys>\r\n              <button type=\"button\" className=\"btn btn-outline-success btn-lg m-2\" onClick={dataTest}>Star test</button>\r\n              <button type=\"button\" className=\"btn btn-outline-danger btn-lg\" onClick={stopTime}>Stop test</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"container\">\r\n      <div className=\"card p-2\" id=\"card-body\">\r\n      <h1 className=\"text-center mb-5\">Datos del cilma</h1>\r\n        \r\n          <div className=\"row\">\r\n            <div className=\"col-md-4 text-center\" id=\"col1\">\r\n              <h3> <span><i className=\"fas fa-temperature-high\"></i></span></h3>\r\n              <h3>Temp</h3>\r\n              <h2>{clima.temp}ºC</h2>\r\n              \r\n              \r\n            </div>\r\n            <div className=\"col-md-4 text-center\" id=\"col2\">\r\n              <h3><span><i className=\"fas fa-wind\"></i></span></h3>\r\n              <h3>press</h3>\r\n              <h2>{clima.pressure} hpa</h2>\r\n              \r\n              \r\n              \r\n            </div>\r\n            <div className=\"col-md-4 text-center\" id=\"col1\">\r\n              <h3><span><i className=\"fas fa-cloud-rain\"></i></span></h3>\r\n              <h3>Hum</h3>\r\n              <h2>{clima.humidity} %</h2>\r\n            </div>\r\n        \r\n        </div>\r\n      </div>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n","import React from 'react';\nimport Grafica2 from './components/Grafica2'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Navigation from './components/Navigation'\nimport Sidebar2 from './components/Sidebar2/Sidebar2'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      \n      \n            <div className=\"container\">\n            <h1>WEATHER APP</h1>\n            <Grafica2></Grafica2>\n            </div>   \n      \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}